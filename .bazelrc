build --symlink_prefix=build/bazel-

test --test_output=errors

# print backtraces in tests
test --test_env RUST_BACKTRACE=1

# Running the simulation is painfully slow in dbg, so we want to run it in opt.
# Side-effect: we can't use #[cfg(debug_assertions)] to build code only for tests.
test -c opt

# rustfmt aspect
build:rustfmt --aspects=@rules_rust//rust:defs.bzl%rustfmt_aspect
build:rustfmt --output_groups=+rustfmt_checks

# clippy aspect
build:clippy --aspects=@rules_rust//rust:defs.bzl%rust_clippy_aspect
build:clippy --output_groups=+clippy_checks

# mypy aspect
build:mypy --aspects @mypy_integration//:mypy.bzl%mypy_aspect
build:mypy --output_groups=+mypy

build:check --config=rustfmt --config=mypy
# run clippy by default
build --config=clippy

# enable C++ toolchains, necessary for Rust finding the NDK linkers
common --incompatible_use_cc_configure_from_rules_cc
build --incompatible_enable_cc_toolchain_resolution

# map Android NDK configuration to platforms
build --platform_mappings=mobile/platform/platform_mappings

# don't pass through PATH
build --incompatible_strict_action_env

# pipelining makes builds faster, but is disabled by default because it's experimental
build --@rules_rust//rust/settings:pipelined_compilation=True

run:flamegraph --run_under "@crates__flamegraph-0.6.2//:flamegraph__bin -o /tmp/flamegraph.svg --"

build:ci --keep_going --experimental_scale_timeouts=3 --config=check
