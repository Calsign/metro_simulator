diff --git a/src/lib.rs b/src/lib.rs
index 6997669..2b7193f 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -62,6 +62,7 @@ pub struct Platform {
     raw_input: egui::RawInput,
     modifier_state: ModifiersState,
     pointer_pos: Option<egui::Pos2>,
+    pointer_touch_id: Option<u64>,
 
     #[cfg(feature = "clipboard")]
     clipboard: Option<ClipboardContext>,
@@ -92,6 +93,7 @@ impl Platform {
             raw_input,
             modifier_state: winit::event::ModifiersState::empty(),
             pointer_pos: Some(Pos2::default()),
+            pointer_touch_id: None,
             #[cfg(feature = "clipboard")]
             clipboard: ClipboardContext::new().ok(),
         }
@@ -155,20 +157,75 @@ impl Platform {
                     }
                 }
                 Touch(touch) => {
-                    let pointer_pos = pos2(
+                    let pointer_pos = egui::pos2(
                         touch.location.x as f32 / self.scale_factor as f32,
                         touch.location.y as f32 / self.scale_factor as f32,
                     );
-
-                    self.raw_input.events.push(egui::Event::PointerButton {
+                    // https://docs.rs/egui-winit/0.17.0/src/egui_winit/lib.rs.html#389
+                    self.raw_input.events.push(egui::Event::Touch {
+                        device_id: egui::TouchDeviceId(egui::epaint::util::hash(touch.device_id)),
+                        id: egui::TouchId::from(touch.id),
+                        phase: match touch.phase {
+                            winit::event::TouchPhase::Started => egui::TouchPhase::Start,
+                            winit::event::TouchPhase::Moved => egui::TouchPhase::Move,
+                            winit::event::TouchPhase::Ended => egui::TouchPhase::End,
+                            winit::event::TouchPhase::Cancelled => egui::TouchPhase::Cancel,
+                        },
                         pos: pointer_pos,
-                        button: egui::PointerButton::Primary,
-                        pressed: match touch.phase {
-                            winit::event::TouchPhase::Started => true,
-                            _ => false,
+                        force: match touch.force {
+                            Some(winit::event::Force::Normalized(force)) => force as f32,
+                            Some(winit::event::Force::Calibrated {
+                                force,
+                                max_possible_force,
+                                ..
+                            }) => (force / max_possible_force) as f32,
+                            None => 0_f32,
                         },
-                        modifiers: Default::default(),
                     });
+                    // If we're not yet translating a touch or we're translating thiis very
+                    // touch...
+                    if self.pointer_touch_id.is_none() || self.pointer_touch_id.unwrap() == touch.id
+                    {
+                        // ... emit PointerButton resp. PointerMoved events to emulate mouse
+                        match touch.phase {
+                            winit::event::TouchPhase::Started => {
+                                self.pointer_touch_id = Some(touch.id);
+                                // First move the pointer to the right location
+                                self.raw_input
+                                    .events
+                                    .push(egui::Event::PointerMoved(pointer_pos));
+                                self.raw_input.events.push(egui::Event::PointerButton {
+                                    pos: pointer_pos,
+                                    pressed: true,
+                                    button: egui::PointerButton::Primary,
+                                    modifiers: self.raw_input.modifiers,
+                                });
+                            }
+                            winit::event::TouchPhase::Moved => {
+                                self.raw_input
+                                    .events
+                                    .push(egui::Event::PointerMoved(pointer_pos));
+                            }
+                            winit::event::TouchPhase::Ended => {
+                                self.pointer_touch_id = None;
+                                self.raw_input.events.push(egui::Event::PointerButton {
+                                    pos: pointer_pos,
+                                    pressed: false,
+                                    button: egui::PointerButton::Primary,
+                                    modifiers: self.raw_input.modifiers,
+                                });
+                                // The pointer should vanish completely to not get any
+                                // hover effects
+                                self.pointer_pos = None;
+                                self.raw_input.events.push(egui::Event::PointerGone);
+                            }
+                            winit::event::TouchPhase::Cancelled => {
+                                self.pointer_touch_id = None;
+                                self.pointer_pos = None;
+                                self.raw_input.events.push(egui::Event::PointerGone);
+                            }
+                        }
+                    }
                 }
                 MouseWheel { delta, .. } => {
                     let mut delta = match delta {
@@ -299,16 +356,14 @@ impl Platform {
     /// Ends the frame. Returns what has happened as `Output` and gives you the draw instructions
     /// as `PaintJobs`. If the optional `window` is set, it will set the cursor key based on
     /// egui's instructions.
-    pub fn end_frame(
-        &mut self,
-        window: Option<&winit::window::Window>,
-    ) -> egui::FullOutput {
+    pub fn end_frame(&mut self, window: Option<&winit::window::Window>) -> egui::FullOutput {
         // otherwise the below line gets flagged by clippy if both clipboard and webbrowser features are disabled
         #[allow(clippy::let_and_return)]
         let output = self.context.end_frame();
 
         if let Some(window) = window {
-            if let Some(cursor_icon) = egui_to_winit_cursor_icon(output.platform_output.cursor_icon) {
+            if let Some(cursor_icon) = egui_to_winit_cursor_icon(output.platform_output.cursor_icon)
+            {
                 window.set_cursor_visible(true);
                 // if the pointer is located inside the window, set cursor icon
                 if self.pointer_pos.is_some() {
