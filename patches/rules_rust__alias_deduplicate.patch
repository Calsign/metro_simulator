diff --git a/crate_universe/src/rendering/templates/crate_build_file.j2 b/crate_universe/src/rendering/templates/crate_build_file.j2
index ff9d4ad..1ecbbe5 100644
--- a/crate_universe/src/rendering/templates/crate_build_file.j2
+++ b/crate_universe/src/rendering/templates/crate_build_file.j2
@@ -15,6 +15,7 @@ load(
     "rust_library",
     "rust_proc_macro",
 )
+load("@rules_rust//crate_universe:util.bzl", "deduplicate_keys", "deduplicate_select_or")
 
 # buildifier: disable=bzl-visibility
 load("@rules_rust//crate_universe/private:selects.bzl", "select_with_or")
diff --git a/crate_universe/src/rendering/templates/partials/crate/aliases.j2 b/crate_universe/src/rendering/templates/partials/crate/aliases.j2
index 5c4b67e..8ca1dc9 100644
--- a/crate_universe/src/rendering/templates/partials/crate/aliases.j2
+++ b/crate_universe/src/rendering/templates/partials/crate/aliases.j2
@@ -1,4 +1,4 @@
-selects.with_or({
+selects.with_or(deduplicate_select_or({
     {%- for cfg, values in selectable.selects %}
     {%- if cfg in context.conditions and context.conditions[cfg] | length %}
         # {{ cfg }}
@@ -6,16 +6,16 @@ selects.with_or({
             {%- for triple in context.conditions[cfg] %}
             "{{ platform_label(triple = triple) }}",
             {%- endfor %}
-        ): {
+        ): deduplicate_keys([
             {%- for dep in values %}
             {%- set dep_crate = context.crates | get(key=dep.id) %}
-            "{{ crate_label(name = dep_crate.name, version = dep_crate.version, target = dep.target) }}": "{{ dep.alias }}",
+            ("{{ crate_label(name = dep_crate.name, version = dep_crate.version, target = dep.target) }}", "{{ dep.alias }}"),
             {%- endfor %}
             {%- for dep in selectable.common %}
             {%- set dep_crate = context.crates | get(key=dep.id) %}
-            "{{ crate_label(name = dep_crate.name, version = dep_crate.version, target = dep.target) }}": "{{ dep.alias }}",
+            ("{{ crate_label(name = dep_crate.name, version = dep_crate.version, target = dep.target) }}", "{{ dep.alias }}"),
             {%- endfor %}
-        },
+        ]),
     {%- else %}
         # {
         # No supported platform triples for cfg: '{{ cfg }}'
@@ -29,4 +29,4 @@ selects.with_or({
             "{{ crate_label(name = dep_crate.name, version = dep_crate.version, target = dep.target) }}": "{{ dep.alias }}",
             {%- endfor %}
         },
-    })
+    }))
diff --git a/crate_universe/util.bzl b/crate_universe/util.bzl
new file mode 100644
index 0000000..d07f448
--- /dev/null
+++ b/crate_universe/util.bzl
@@ -0,0 +1,44 @@
+def deduplicate_keys(pairs):
+    out = {}
+    for (key, value) in pairs:
+        if key in out and out[key] != value:
+            fail("Got duplicate key {} with different values: {}, {}".format(key, out[key], value))
+        out[key] = value
+    return out
+
+def deduplicate_select_or(selects):
+    # this isn't actually semantically correct, but it fixes some stupid issues
+
+    counts = {}
+    for key in selects.keys():
+        if type(key) == "string":
+            triples = [key]
+        else:
+            triples = key
+        for triple in triples:
+            if triple not in counts:
+                counts[triple] = 0
+            counts[triple] += 1
+
+    duplicates = [triple for triple, count in counts.items() if count > 1]
+
+    if len(duplicates) == 0:
+        return selects
+
+    out = {}
+
+    for key in selects.keys():
+        if type(key) == "string":
+            triples = [key]
+        else:
+            triples = key
+        for triple in triples:
+            if triple not in out:
+                out[triple] = selects[key].items()
+            else:
+                out[triple] = out[triple] + selects[key].items()
+
+    return {
+        triple: deduplicate_keys(data)
+        for triple, data in out.items()
+    }
