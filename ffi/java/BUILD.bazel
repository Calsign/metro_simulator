load("//util:macros.bzl", "ms_rust_shared_library")
load("@rules_java//java:defs.bzl", "java_library", "java_test")
load("@rules_cc//cc:defs.bzl", "cc_import")

ms_rust_shared_library(
    name = "engine",
    srcs = ["engine.rs"],
    deps = [
        "@crates//:jni",
    ],
)

cc_import(
    name = "engine_cc",
    shared_library = ":engine",
)

JAVA_SRCS = glob(["src/**/*.java"])

java_library(
    name = "java",
    srcs = JAVA_SRCS,
    visibility = ["//visibility:public"],
    deps = [":engine_cc"],
)

# Generate headers from Java source files.
# TODO: clean this up.
genrule(
    name = "java_headers",
    srcs = JAVA_SRCS,
    outs = ["{}.h".format(src[4:][:-5].replace("/", "_")) for src in JAVA_SRCS],
    cmd = "javac -h $(RULEDIR) $(SRCS) || true",
    tags = ["manual"],
)

# for some reason this indirection is necessary for the shared library to appear in the runfiles of the test
genrule(
    name = "engine_so",
    srcs = [":engine"],
    outs = ["lib/libengine.so"],
    cmd = "cp $< $@",
)

java_test(
    name = "load_test",
    srcs = ["load_test.java"],
    data = [":engine_so"],
    jvm_flags = ["-Djava.library.path=ffi/java/lib"],
    main_class = "LoadTest",
    deps = [":java"],
)
