load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("@bazel_skylib//rules:select_file.bzl", "select_file")
load("@bazel_gazelle//:def.bzl", "gazelle")
load("@rules_rust//tools/rust_analyzer:rules.bzl", "rust_analyzer")

# gazelle:exclude build

# gazelle:rust_lockfile cargo/crate_universe.lock
# gazelle:rust_crates_prefix @crates//:

# gazelle:map_kind rust_library ms_rust_library //util:macros.bzl
# gazelle:map_kind rust_binary ms_rust_binary //util:macros.bzl
# gazelle:map_kind rust_test ms_rust_test //util:macros.bzl
# gazelle:map_kind rust_shared_library ms_rust_shared_library //util:macros.bzl

gazelle(
    name = "gazelle",
    gazelle = "@gazelle_rust//:gazelle_bin",
)

# This enables full rust-analyzer support. When rust targets change, in addition to gazelle, also
# run //:update_rust_analyzer. Then configure your editor to use `bazel run //:update` as the cargo
# check override command.
rust_analyzer(
    check_name = "check",
    rustc_outputs = "build/rustc_outputs.txt",
    symlink_prefix = "build/",
    update_name = "update_rust_analyzer",
)

# android_binary produces three files. We just want the main apk.
select_file(
    name = "android_app",
    srcs = "//mobile/android:app_all_cpus",
    subpath = "app.apk",
)

# release target uploaded at the end of CI
pkg_tar(
    name = "release",
    srcs = [
        ":android_app",
        "//maps:sf",
        "//viewers/app:desktop",
    ],
    extension = ".tar.gz",
    visibility = ["//visibility:private"],
)
