load("@rules_python//python:defs.bzl", "py_binary", "py_library")
load("@pip_pkgs//:requirements.bzl", "requirement")

exports_files(
    srcs = ["main.py"],
    visibility = ["//maps:__pkg__"],
)

# We don't want to have to re-generate the entire map whenever we update the engine. So we split the
# generation into two steps: the generator and the baker. The generator processes the input data and
# pickles the information needed to generate the actual map, but crucially does not depend on the
# engine library. Then the baker takes the baker data produced by the generator and uses the engine
# library to produce the final map. The baking step is pretty quick, which makes it reasonable to
# iterate and re-bake the map. The code is shared, so places that need to use the engine library
# should use a deferred import.

py_library(
    name = "generate_lib",
    srcs = [
        "common.py",
        "data.py",
        "gdal.py",
        "highways.py",
        "housing.py",
        "layer.py",
        "lodes.py",
        "metros.py",
        "osm.py",
        "quadtree.py",
        "simple_density.py",
        "terrain.py",
        "workplaces.py",
    ],
    visibility = ["//visibility:public"],
    deps = [
        requirement("gdal"),
        requirement("numpy"),
        requirement("matplotlib"),
        requirement("argh"),
        requirement("toml"),
        requirement("pyshp"),
        requirement("shapely"),
        "@rules_python//python/runfiles",

        # type stubs
        requirement("types-toml"),
        requirement("data-science-types"),
    ],
)

# NOTE: Does not depend on on //ffi/python!
py_binary(
    name = "generator",
    srcs = ["main.py"],
    main = "main.py",
    visibility = ["//visibility:public"],
    deps = [
        ":generate_lib",
    ],
)

py_binary(
    name = "baker",
    srcs = ["main.py"],
    main = "main.py",
    visibility = ["//visibility:public"],
    deps = [
        ":generate_lib",
        "//ffi/python",
    ],
)
